/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPage;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author keert
 */
public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        p1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();
        jTextField17 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("BookID");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Title");

        jLabel3.setText("Author");

        p1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "book_id", "title", "author_name", "branch_id", "no_of_copies", "available"
            }
        ));
        p1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                p1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(p1);

        jButton1.setText("Fetch Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel20.setText("Select any row to Check out");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 955, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jButton1)
                        .addGap(133, 133, 133)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel1)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(jTextField1)
                            .addComponent(jTextField3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel20)
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Search and Availability", jPanel1);

        jLabel4.setText("BookID");

        jLabel5.setText("BranchID");

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel6.setText("Card_No");

        jButton3.setText("Check out Book");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(jButton3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField5)
                            .addComponent(jTextField4)
                            .addComponent(jTextField6, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))))
                .addContainerGap(589, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(482, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Check Out", jPanel2);

        jLabel8.setText("Enter the Following Values to add a borrower");

        jLabel9.setText("FName");

        jLabel10.setText("LName");

        jLabel11.setText("Email");

        jLabel12.setText("Address");

        jLabel13.setText("City");

        jLabel14.setText("State");

        jLabel15.setText("Phone");

        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jButton4.setText("Add Borrower");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel8))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField8)
                            .addComponent(jTextField7)
                            .addComponent(jTextField9)
                            .addComponent(jTextField10)
                            .addComponent(jTextField11)
                            .addComponent(jTextField12)
                            .addComponent(jTextField13, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jButton4)))
                .addContainerGap(549, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(jButton4)
                .addContainerGap(300, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Adding a Borrower ", jPanel3);

        jLabel16.setText("BookID");

        jLabel17.setText("CardNo");

        jLabel18.setText("BorrowerName");

        jTextField14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField14ActionPerformed(evt);
            }
        });

        jButton5.setText("SEARCH");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "book_id", "branch_id", "card_no", "due_date"
            }
        ));
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable4);

        jButton6.setText("Clear All");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Check In and Pay Fine");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel19.setText("Select a row from the jTable and CLICK ON CHECK IN ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel16))
                                .addGap(76, 76, 76)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jButton5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                                        .addComponent(jButton6))
                                    .addComponent(jTextField14)
                                    .addComponent(jTextField15)
                                    .addComponent(jTextField16))
                                .addGap(62, 62, 62)
                                .addComponent(jButton7))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(jLabel19)))
                .addContainerGap(200, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addGap(16, 16, 16)
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Check In", jPanel4);

        jButton8.setText("Refresh Fines");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("DISPLAY Fines Table");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "card_no", "fine_amt"
            }
        ));
        jScrollPane6.setViewportView(jTable5);

        jButton10.setText("Clear All");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel21.setText("Card Number");

        jButton11.setText("Fine for  card Number");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel7.setText("Press Refresh Button to update Fines Table");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel21)
                        .addGap(32, 32, 32)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton11)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton10)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(181, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton10)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        jTabbedPane1.addTab("Fines", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        DefaultTableModel model=(DefaultTableModel)p1.getModel();
        while(model.getRowCount()>0)
        {
            for(int i=0;i<model.getRowCount();i++)
            {
            model.removeRow(i);
            }
        }
        try
        {
        Class.forName("com.mysql.jdbc.Driver");
        System.out.println("Entered 1");
        Connection con=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/library_db", "root", "root");
        System.out.println("Entered 2");
        String bid=jTextField1.getText();
        //System.out.println(bid);
        String title=jTextField2.getText();
        String author=jTextField3.getText();
        Statement st=con.createStatement();
        //String query="";
       
        ResultSet rs,rs1,rs2,rs3,rs4,rs5,rs6;
        if(!bid.equals("") && title.equals("") && author.equals(""))
        {
        String query="select temp.book_id as book_id,temp.title as title,temp.author_name as author_name,temp.branch_id as branch_id, no_of_copies as no_of_copies,no_of_copies-count(book_loans.book_id) as available from book_loans right join (select title,book.book_id,branch_id,book_authors.author_name,no_of_copies from book_copies natural join book left join book_authors on book.book_id=book_authors.book_id where book.book_id like '%"+bid+"%' and no_of_copies>0 group by branch_id,book_id) as temp on book_loans.book_id=temp.book_id and book_loans.branch_id=temp.branch_id and book_loans.date_in is null group by temp.book_id,temp.branch_id,no_of_copies;";
        rs=st.executeQuery(query);
            
            
        while(rs.next()){
            System.out.println("Entered 3");
            String c1=rs.getString("book_id");
            String c2=rs.getString("title");
            System.out.println("Entered 4");
            String c3=rs.getString("author_name");
            System.out.println("Entered 5");
            int c4=rs.getInt("branch_id");
            System.out.println("Entered 6");
            int c5=rs.getInt("no_of_copies");
            System.out.println("Entered 6");
            String c6=rs.getString("available");
            System.out.println("Entered 7");
            model.addRow(new Object[]{c1,c2,c3,c4,c5,c6});
           
        }
        }
        else if(bid.equals("") && !title.equals("") && author.equals(""))
        {
        String query="select temp.book_id as book_id,temp.title as title, temp.author_name as author_name,temp.branch_id as branch_id, no_of_copies as no_of_copies,no_of_copies-count(book_loans.book_id) as available from book_loans right join (select title,book.book_id,branch_id,book_authors.author_name,no_of_copies from book_copies natural join book left join book_authors on book.book_id=book_authors.book_id where book.title like '%"+title+"%' and no_of_copies>0 group by branch_id,book_id) as temp on book_loans.book_id=temp.book_id and book_loans.branch_id=temp.branch_id and book_loans.date_in is null group by temp.book_id,temp.branch_id,no_of_copies;";
        rs1=st.executeQuery(query);
        while(rs1.next()){
            System.out.println("Entered 3");
            String c1=rs1.getString("book_id");
            String c2=rs1.getString("title");
            System.out.println("Entered 4");
            String c3=rs1.getString("author_name");
            System.out.println("Entered 5");
            int c4=rs1.getInt("branch_id");
            System.out.println("Entered 6");
            int c5=rs1.getInt("no_of_copies");
            System.out.println("Entered 6");
            String c6=rs1.getString("available");
            System.out.println("Entered 7");
            model.addRow(new Object[]{c1,c2,c3,c4,c5,c6});
            
        }
        }
        else if(bid.equals("") && title.equals("") && !author.equals(""))
        {
        String query="select temp.book_id as book_id,temp.title as title, temp.author_name as author_name,temp.branch_id as branch_id, no_of_copies as no_of_copies,no_of_copies-count(book_loans.book_id) as available from book_loans right join (select title,book.book_id,branch_id,book_authors.author_name,no_of_copies from book_copies natural join book left join book_authors on book.book_id=book_authors.book_id where book_authors.author_name like '%"+author+"%' and no_of_copies>0 group by branch_id,book_id) as temp on book_loans.book_id=temp.book_id and book_loans.branch_id=temp.branch_id and book_loans.date_in is null group by temp.book_id,temp.branch_id,no_of_copies;";
            rs2=st.executeQuery(query);
        while(rs2.next()){
            System.out.println("Entered 3");
            String c1=rs2.getString("book_id");
            String c2=rs2.getString("title");
            System.out.println("Entered 4");
            String c3=rs2.getString("author_name");
            System.out.println("Entered 5");
            int c4=rs2.getInt("branch_id");
            System.out.println("Entered 6");
            int c5=rs2.getInt("no_of_copies");
            System.out.println("Entered 6");
            String c6=rs2.getString("available");
            System.out.println("Entered 7");
            model.addRow(new Object[]{c1,c2,c3,c4,c5,c6});
            
        }
        }
        else if(!bid.equals("") && !title.equals("") && author.equals(""))
        {
        String query="select temp.book_id as book_id,temp.title as title, temp.author_name as author_name,temp.branch_id as branch_id, no_of_copies as no_of_copies,no_of_copies-count(book_loans.book_id) as available from book_loans right join (select title,book.book_id,branch_id,book_authors.author_name,no_of_copies from book_copies natural join book left join book_authors on book.book_id=book_authors.book_id where book.book_id like '%"+bid+"%'and book.title like '%"+title+"%' and no_of_copies>0 group by branch_id,book_id) as temp on book_loans.book_id=temp.book_id and book_loans.branch_id=temp.branch_id and book_loans.date_in is null group by temp.book_id,temp.branch_id,no_of_copies;";
            rs3=st.executeQuery(query);
        while(rs3.next()){
            System.out.println("Entered 3");
            String c1=rs3.getString("book_id");
            String c2=rs3.getString("title");
            System.out.println("Entered 4");
            String c3=rs3.getString("author_name");
            System.out.println("Entered 5");
            int c4=rs3.getInt("branch_id");
            System.out.println("Entered 6");
            int c5=rs3.getInt("no_of_copies");
            System.out.println("Entered 6");
            String c6=rs3.getString("available");
            System.out.println("Entered 7");
            model.addRow(new Object[]{c1,c2,c3,c4,c5,c6});
            
        }
        }
        else if(!bid.equals("") && title.equals("") && !author.equals(""))
        {
        String query="select temp.book_id as book_id,temp.title as title, temp.author_name as author_name,temp.branch_id as branch_id, no_of_copies as no_of_copies,no_of_copies-count(book_loans.book_id) as available from book_loans right join (select title,book.book_id,branch_id,book_authors.author_name,no_of_copies from book_copies natural join book left join book_authors on book.book_id=book_authors.book_id where book.book_id like '%"+bid+"%'and book_authors.author_name like '%"+author+"%' and no_of_copies>0 group by branch_id,book_id) as temp on book_loans.book_id=temp.book_id and book_loans.branch_id=temp.branch_id  and book_loans.date_in is null group by temp.book_id,temp.branch_id,no_of_copies;";
            rs4=st.executeQuery(query);
        while(rs4.next()){
            System.out.println("Entered 3");
            String c1=rs4.getString("book_id");
            String c2=rs4.getString("title");
            System.out.println("Entered 4");
            String c3=rs4.getString("author_name");
            System.out.println("Entered 5");
            int c4=rs4.getInt("branch_id");
            System.out.println("Entered 6");
            int c5=rs4.getInt("no_of_copies");
            System.out.println("Entered 6");
            String c6=rs4.getString("available");
            System.out.println("Entered 7");
            model.addRow(new Object[]{c1,c2,c3,c4,c5,c6});
            
        }
        }
        else if(bid.equals("") && !title.equals("") && !author.equals(""))
        {
        String query="select temp.book_id as book_id,temp.title as title, temp.author_name as author_name,temp.branch_id as branch_id, no_of_copies as no_of_copies,no_of_copies-count(book_loans.book_id) as available from book_loans right join (select title,book.book_id,branch_id,book_authors.author_name,no_of_copies from book_copies natural join book left join book_authors on book.book_id=book_authors.book_id where book.title like '%"+title+"%'and book_authors.author_name like '%"+author+"%' and no_of_copies>0 group by branch_id,book_id) as temp on book_loans.book_id=temp.book_id and book_loans.branch_id=temp.branch_id and book_loans.date_in is null group by temp.book_id,temp.branch_id,no_of_copies;";
            rs5=st.executeQuery(query);
        while(rs5.next()){
            System.out.println("Entered 3");
            String c1=rs5.getString("book_id");
            String c2=rs5.getString("title");
            System.out.println("Entered 4");
            String c3=rs5.getString("author_name");
            System.out.println("Entered 5");
            int c4=rs5.getInt("branch_id");
            System.out.println("Entered 6");
            int c5=rs5.getInt("no_of_copies");
            System.out.println("Entered 6");
            String c6=rs5.getString("available");
            System.out.println("Entered 7");
            model.addRow(new Object[]{c1,c2,c3,c4,c5,c6});
            
        }
        }
        else if(!bid.equals("") && !title.equals("") && !author.equals(""))
        {
        String query="select temp.book_id as book_id,temp.title as title, temp.author_name as author_name,temp.branch_id as branch_id, no_of_copies as no_of_copies,no_of_copies-count(book_loans.book_id) as available from book_loans right join (select title,book.book_id,branch_id,book_authors.author_name,no_of_copies from book_copies natural join book left join book_authors on book.book_id=book_authors.book_id where book.book_id like '%"+bid+"%'and book.title like '%"+title+"%'and book_authors.author_name like '%"+author+"%' and  no_of_copies>0 group by branch_id,book_id) as temp on book_loans.book_id=temp.book_id and book_loans.branch_id=temp.branch_id and book_loans.date_in is null group by temp.book_id,temp.branch_id,no_of_copies;";
            rs6=st.executeQuery(query);
        while(rs6.next()){
            System.out.println("Entered 3");
            String c1=rs6.getString("book_id");
            String c2=rs6.getString("title");
            System.out.println("Entered 4");
            String c3=rs6.getString("author_name");
            System.out.println("Entered 5");
            int c4=rs6.getInt("branch_id");
            System.out.println("Entered 6");
            int c5=rs6.getInt("no_of_copies");
            System.out.println("Entered 6");
            int c6=rs6.getInt("available");
            System.out.println("Entered 7");
            model.addRow(new Object[]{c1,c2,c3,c4,c5,c6});
       
        }
        }
        else
        {
        JOptionPane.showMessageDialog(null,"Please enter any field");
        }
        if(model.getRowCount()==0)
        {
            JOptionPane.showMessageDialog(null,"No Records Found with the given Input");
        }
        //String query="SELECT bc.book_id,b.title,ba.author_name,bc.branch_id,no_of_copies from book_copies as bc,book as b,book_authors as ba where bc.book_id=b.book_id and b.book_id=ba.book_id and ba.author_name like '%Mark%' and no_of_copies>0 GROUP BY bc.branch_id,bc.book_id;";
        //ResultSet rs=st.executeQuery(query);
       /* while(rs.next()){
            System.out.println("Entered 3");
            String c1=rs.getString("book_id");
            String c2=rs.getString("title");
            System.out.println("Entered 4");
            String c3=rs.getString("author_name");
            System.out.println("Entered 5");
            int c4=rs.getInt("branch_id");
            System.out.println("Entered 6");
            int c5=rs.getInt("no_of_copies");
            System.out.println("Entered 6");
            String c6=rs.getString("available");
            System.out.println("Entered 7");
            model.addRow(new Object[]{c1,c2,c3,c4,c5,c6});
            
        }*/
        //rs.close();
        //st.close();
        con.close();
        }catch(Exception e){
        JOptionPane.showMessageDialog(this,"Error in connectivity");
        
        }
        

// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel model=(DefaultTableModel)p1.getModel();
        while(model.getRowCount()>0)
        {
            for(int i=0;i<model.getRowCount();i++)
            {
            model.removeRow(i);
            }
        }
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    public static Date addDays(Date a, int days)
{
     a.setTime(a.getTime()+days*1000*24*60*60);
     return a;
}
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        /*String bookid=jTextField4.getText();
        int branchid=Integer.parseInt(jTextField5.getText());
        int cardno=Integer.parseInt(jTextField6.getText());*/
        try
	{
            Class.forName("com.mysql.jdbc.Driver");
        //System.out.println("Entered 1");
            Connection conn=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/library_db", "root", "root");
		// Create a SQL statement object and execute the query.
                        Statement stmt = conn.createStatement();
                        String cno=jTextField6.getText();
                        String bkid=jTextField4.getText();
                        String brid=jTextField5.getText();
                        if(bkid.length()!=10)
                        {
                            JOptionPane.showMessageDialog(null,"Enter Valid Book_ID");
                        }
                        int b=Integer.parseInt(brid);
                        //String outdate="";
                        String output;
                        int bc = 0;
                        try{
                            bc=Integer.parseInt(cno);
                        }
                        catch(NumberFormatException e){
                            String st="Enter Correct Format of Number";
                            JOptionPane.showMessageDialog(null,st); 
                        }
                        String book_count="select count(*)as count from Book_loans where date_in is null and Card_no="+bc+";";
                        String availability="SELECT book_copies.no_of_copies-count(book_loans.book_id)as total_avail from book_copies,book_loans where book_loans.book_id=book_copies.book_id and book_loans.branch_id=book_copies.branch_id and book_loans.date_in is null and book_loans.book_id='"+bkid+"'and book_loans.branch_id="+b+";";
                        ResultSet rs,rs1;
                        String n1 = null;
                        String n2=null;
                        rs=stmt.executeQuery(book_count);
                        while(rs.next()){
                            System.out.println("s");
                        n1=rs.getString("count");
                        System.out.println("K");
                        }
                        rs1=stmt.executeQuery(availability);
                        while(rs1.next()){
                            System.out.println("G");
                        n2=rs1.getString("total_avail");
                        System.out.println("T");
                        }
                        //ResultSet bc1=stmt.executeQuery(book_count);
                        int count = Integer.parseInt(n1);
                        int avail=Integer.parseInt(n2);
                        if(count<3 && avail>0){
                        try {
                            //DateFormat curDate=DateFormat.getDateInstance();
                           // SimpleDateFormat parser = new SimpleDateFormat("yyyy-MM-dd");
                            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                            System.out.println("Entered 1");
                            /*Date date = formatter.parse(outdate);
                            Date duedate=addDays(date,14);
                            output=formatter.format(duedate);
                            */
                            Date outdate=new Date();
                            String s=formatter.format(outdate);
                            Date date=formatter.parse(s);
                            outdate=date;
                            Date duedate=addDays(date,14);
                            output=formatter.format(duedate);
                            System.out.println("Entered 2");
                            String add= "insert into Book_Loans(book_id,branch_id,card_no,date_out,due_date) values('"+bkid+"',"+b+",'"+cno+"','"+s+"','"+output+"');";
                            System.out.println("Entered 3");
                            stmt.executeUpdate(add);
                            System.out.println("Entered 4");
                            JOptionPane.showMessageDialog(null,"Book Checked out");
                            jTextField4.setText("");
                            jTextField5.setText("");
                            jTextField6.setText("");
                            
                            
                        } 
                        catch (Exception ex) {
                                JOptionPane.showMessageDialog(null,"No person exists with the given card number");
                         }
                    }
                        else if(count>=3){
                            String st="Maximum Limit of Books Exceeded:Unable to Loan Book";
                            JOptionPane.showMessageDialog(null,st);    
                    }
                        else {
                            String st="There are no more book copies available at your library_branch";
                            JOptionPane.showMessageDialog(null,st);    
                    }
                        
                    conn.close();
                }
                catch(SQLException ex)
		{
		JOptionPane.showMessageDialog(null,ex);
                } catch (ClassNotFoundException ex) { 
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
    
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
            try
            {
            Class.forName("com.mysql.jdbc.Driver");
        //System.out.println("Entered 1");
            Connection conn=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/library_db", "root", "root");
                Statement stmt = conn.createStatement();
                  
                        String fna=jTextField7.getText();
                        String lna=jTextField8.getText();
                        String email=jTextField9.getText();
                        String adr=jTextField10.getText();
                        String city=jTextField11.getText();
                        String state=jTextField12.getText();
                        String phn=jTextField13.getText();
                        String add= "insert into Borrower(fname,lname,email,address,city,state,phone) values('"+fna+"','"+lna+"','"+email+"','"+adr+"','"+city+"','"+state+"','"+phn+"');";
                        stmt.executeUpdate(add);
                        JOptionPane.showMessageDialog(null,"Succesfull");
                      
                        jTextField7.setText("");
                        jTextField8.setText("");
                        jTextField9.setText("");
                        jTextField10.setText("");
                        jTextField13.setText("");
                        jTextField12.setText("");
                        jTextField11.setText("");
                        conn.close();
            }
            catch(SQLException ex)
            {
                        
		JOptionPane.showMessageDialog(null,"Person Already Exists");
                        jTextField7.setText("");
                        jTextField8.setText("");
                        jTextField9.setText("");
                        jTextField10.setText("");
                        jTextField13.setText("");
                        jTextField12.setText("");
                        jTextField11.setText("");
            }  
            catch(Exception e){
            JOptionPane.showMessageDialog(this,"Error in connectivity");
                        jTextField7.setText("");
                        jTextField8.setText("");
                        jTextField9.setText("");
                        jTextField10.setText("");
                        jTextField13.setText("");
                        jTextField12.setText("");
                        jTextField11.setText("");
            }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField14ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model=(DefaultTableModel)jTable4.getModel();
        while(model.getRowCount()>0)
        {
            for(int i=0;i<model.getRowCount();i++)
            {
            model.removeRow(i);
            }
        }
          try
		{
		Class.forName("com.mysql.jdbc.Driver");
      
                Connection conn=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/library_db", "root", "root");
                        Statement stmt = conn.createStatement();
                        String cno=jTextField15.getText();
                        String bkid=jTextField14.getText();
                        System.out.println(bkid);
                        String brname=jTextField16.getText();
                        int c_no=0;
                        if(!cno.equals(""))
                         c_no=Integer.parseInt(cno);
                      
                        ResultSet rs;
                       
                        if(brname.equals("") && cno.equals(""))
                        {
                            System.out.println(bkid);
                        String query= "SELECT book_id,branch_id,card_no,due_date FROM book_loans WHERE book_id like '%"+bkid+"%' and book_loans.date_in is null;";
                        rs=stmt.executeQuery(query);
                            while(rs.next())
                            {
                            System.out.println("1");
                            String c1=rs.getString("book_id");
                            System.out.println("1");
                            int c2=rs.getInt("branch_id");
                            System.out.println("1");
                            int c3=rs.getInt("card_no");
                            System.out.println("1");
                            String c4=rs.getString("due_date");
                            System.out.println("1");
                            model.addRow(new Object[]{c1,c2,c3,c4});
                            }
                        }
                        else if(bkid.equals("") && brname.equals(""))
                        {
                        String query= "SELECT book_id,branch_id,card_no,due_date FROM book_loans WHERE card_no="+c_no+" and book_loans.date_in is null;";
                        rs=stmt.executeQuery(query);
                            while(rs.next())
                            {
                            System.out.println("1");
                            String c1=rs.getString("book_id");
                            System.out.println("1");
                            int c2=rs.getInt("branch_id");
                            System.out.println("1");
                            int c3=rs.getInt("card_no");
                            System.out.println("1");
                            String c4=rs.getString("due_date");
                            System.out.println("1");
                            model.addRow(new Object[]{c1,c2,c3,c4});
                            } 
                        }
                        else if(bkid.equals("") && cno.equals(""))
                        {
                        String query= "SELECT book_loans.book_id,book_loans.branch_id,book_loans.card_no,book_loans.due_date FROM book_loans,borrower WHERE borrower.card_no=book_loans.card_no and (borrower.fname like '%"+brname+"%' or borrower.lname like '%"+brname+"%') and book_loans.date_in is null;";
                        rs=stmt.executeQuery(query);
                            while(rs.next())
                            {
                            System.out.println("1");
                            String c1=rs.getString("book_id");
                            System.out.println("1");
                            int c2=rs.getInt("branch_id");
                            System.out.println("1");
                            int c3=rs.getInt("card_no");
                            System.out.println("1");
                            String c4=rs.getString("due_date");
                            System.out.println("1");
                            model.addRow(new Object[]{c1,c2,c3,c4});
                            } 
                        }
                        else if(bkid.equals(""))
                        {
                        String query= "SELECT book_loans.book_id,book_loans.branch_id,book_loans.card_no,book_loans.due_date FROM book_loans,borrower WHERE borrower.card_no=book_loans.card_no and book_loans.card_no="+cno+" and (borrower.fname like '%"+brname+"%' or borrower.lname like '%"+brname+"%'') and book_loans.date_in is null;";
                        rs=stmt.executeQuery(query);
                            while(rs.next())
                            {
                            System.out.println("1");
                            String c1=rs.getString("book_id");
                            System.out.println("1");
                            int c2=rs.getInt("branch_id");
                            System.out.println("1");
                            int c3=rs.getInt("card_no");
                            System.out.println("1");
                            String c4=rs.getString("due_date");
                            System.out.println("1");
                            model.addRow(new Object[]{c1,c2,c3,c4});
                            } 
                        }
                        else if(cno.equals(""))
                        {
                        String query= "SELECT book_loans.book_id,book_loans.branch_id,book_loans.card_no,book_loans.due_date FROM book_loans,borrower WHERE borrower.card_no=book_loans.card_no and book_loans.book_id="+bkid+" and (borrower.fname like '%"+brname+"%' or borrower.lname like '%"+brname+"%') and book_loans.date_in is null;";
                        rs=stmt.executeQuery(query);
                            while(rs.next())
                            {
                            System.out.println("1");
                            String c1=rs.getString("book_id");
                            System.out.println("1");
                            int c2=rs.getInt("branch_id");
                            System.out.println("1");
                            int c3=rs.getInt("card_no");
                            System.out.println("1");
                            String c4=rs.getString("due_date");
                            System.out.println("1");
                            model.addRow(new Object[]{c1,c2,c3,c4});
                            } 
                        }
                        else if(brname.equals(""))
                        {
                        String query= "SELECT book_loans.book_id,book_loans.branch_id,book_loans.card_no,book_loans.due_date FROM book_loans,borrower WHERE borrower.card_no=book_loans.card_no and book_loans.card_no="+cno+" and book_loans.book_id="+bkid+" and book_loans.date_in is null;";
                        rs=stmt.executeQuery(query);
                            while(rs.next())
                            {
                            System.out.println("1");
                            String c1=rs.getString("book_id");
                            System.out.println("1");
                            int c2=rs.getInt("branch_id");
                            System.out.println("1");
                            int c3=rs.getInt("card_no");
                            System.out.println("1");
                            String c4=rs.getString("due_date");
                            System.out.println("1");
                            model.addRow(new Object[]{c1,c2,c3,c4});
                            } 
                        }
                        else if(!bkid.equals("") && !brname.equals("") && !cno.equals(""))
                        {
                         String query= "SELECT book_loans.book_id,book_loans.branch_id,book_loans.card_no,book_loans.due_date FROM book_loans,borrower WHERE borrower.card_no=book_loans.card_no and book_loans.card_no="+cno+" and book_loans.book_id="+bkid+" and (borrower.fname like '%"+brname+"%' or borrower.lname like '%"+brname+"%') and book_loans.date_in is null;";
                        rs=stmt.executeQuery(query);
                            while(rs.next())
                            {
                            System.out.println("1");
                            String c1=rs.getString("book_id");
                            System.out.println("1");
                            int c2=rs.getInt("branch_id");
                            System.out.println("1");
                            int c3=rs.getInt("card_no");
                            System.out.println("1");
                            String c4=rs.getString("due_date");
                            System.out.println("1");
                            model.addRow(new Object[]{c1,c2,c3,c4});
                            } 
                        }
                        else if(bkid.equals("") && brname.equals("") && cno.equals("") )
                        {
                         JOptionPane.showMessageDialog(this,"Please Enter some value to search");   
                        }
                        else
                        {
                        JOptionPane.showMessageDialog(this,"No Matching row");
                        }
                        //duedate.setText("");
                        if(model.getRowCount()==0)
                        {
                        JOptionPane.showMessageDialog(null,"No Records Found with the given Input");
                        }
                        
                        conn.close();
                }
                catch(SQLException ex)
		{
		JOptionPane.showMessageDialog(null,ex);
                } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }catch(Exception e){
        JOptionPane.showMessageDialog(this,"Error in connectivity");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model=(DefaultTableModel)jTable4.getModel();
        while(model.getRowCount()>0)
        {
            for(int i=0;i<model.getRowCount();i++)
            {
            model.removeRow(i);
            }
        }
        
                        jTextField14.setText("");
                        jTextField15.setText("");
                        jTextField16.setText("");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        try
        {
        Class.forName("com.mysql.jdbc.Driver");
        System.out.println("Entered 1");
        Connection con=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/library_db", "root", "root");
        
        String s1="INSERT INTO fines(loan_id,fine_amt,paid) select loan_id,DATEDIFF(CURDATE(),due_date)*0.25,false from book_loans where DATEDIFF(CURDATE(),due_date)>0 and date_in IS NULL and NOT EXISTS (SELECT * FROM fines WHERE book_loans.loan_id = fines.loan_id);";
        String s2="INSERT INTO fines(loan_id,fine_amt,paid) select loan_id,DATEDIFF(date_in,due_date)*0.25,true from book_loans where DATEDIFF(date_in,due_date)>0 and NOT EXISTS (SELECT * FROM fines WHERE book_loans.loan_id = fines.loan_id);";
        String s3="DELETE FROM fines;";
        
        int jbrid=Integer.parseInt(jbranch_id);
        int jcn=Integer.parseInt(jcard_no);
        String cinquery="SELECT loan_id FROM book_loans where book_id='"+jbook_id+"' and branch_id="+jbrid+" and card_no="+jcn+";";
        System.out.println("Entered 2");
        Statement st=con.createStatement();
        st.executeUpdate(s3);
        st.executeUpdate(s1);
        st.executeUpdate(s2);
        System.out.println("Entered 3");
        ResultSet rs=st.executeQuery(cinquery);
        System.out.println("Entered 4");
        String l_id=null;
            while(rs.next())
            {
                System.out.println("Entered 5");
                l_id=rs.getString("loan_id");
                System.out.println("Entered 6");
            }
        int loan_id=Integer.parseInt(l_id);
        System.out.println(loan_id);
        System.out.println("Entered 7");
        String blquery="UPDATE book_loans SET date_in=curDate() where loan_id="+loan_id+";";
        String fquery="UPDATE fines SET paid=TRUE WHERE loan_id="+loan_id+";";
        String faquery="UPDATE fines SET fine_amt=0 where paid=TRUE";
        System.out.println("Entered 8");
        st.executeUpdate(blquery);
        System.out.println("Entered 9");
        st.executeUpdate(fquery);
        System.out.println("Entered 10");
        JOptionPane.showMessageDialog(null,"Succesfull");
        
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error in connectivity");
        }
        
        
    }//GEN-LAST:event_jButton7ActionPerformed
String jbook_id="";
String jbranch_id="";
String jcard_no="";
    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        // TODO add your handling code here:
        try
        {
            int row=jTable4.getSelectedRow();
            jbook_id=(jTable4.getModel().getValueAt(row,0).toString());
            jbranch_id=(jTable4.getModel().getValueAt(row,1).toString());
            jcard_no=(jTable4.getModel().getValueAt(row,2).toString());
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jTable4MouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
        System.out.println("Entered 1");
        Connection con=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/library_db", "root", "root");
        String s1="INSERT INTO fines(loan_id,fine_amt,paid) select loan_id,DATEDIFF(CURDATE(),due_date)*0.25,false from book_loans where DATEDIFF(CURDATE(),due_date)>0 and date_in IS NULL and NOT EXISTS (SELECT * FROM fines WHERE book_loans.loan_id = fines.loan_id);";
        String s2="INSERT INTO fines(loan_id,fine_amt,paid) select loan_id,DATEDIFF(date_in,due_date)*0.25,true from book_loans where DATEDIFF(date_in,due_date)>0 and NOT EXISTS (SELECT * FROM fines WHERE book_loans.loan_id = fines.loan_id);";
        String s3="DELETE FROM fines;";
        System.out.println("Entered 1");
        
        Statement st=con.createStatement();
        System.out.println("Entered 2");
        st.executeUpdate(s3);
        st.executeUpdate(s1);
        System.out.println("Entered 3");
        st.executeUpdate(s2);
        JOptionPane.showMessageDialog(null,"SUCCESFULLY FINES ARE REFRESHED" );
        System.out.println("Entered 4");
        con.close();
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error in connectivity");
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model=(DefaultTableModel)jTable5.getModel();
        while(model.getRowCount()>0)
        {
            for(int i=0;i<model.getRowCount();i++)
            {
            model.removeRow(i);
            }
        }
        try
        {
        Class.forName("com.mysql.jdbc.Driver");
        System.out.println("Entered 1");
        Connection con=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/library_db", "root", "root");
        System.out.println("Entered 2");
       Statement st=con.createStatement();
       String query="SELECT book_loans.card_no as card_no,SUM(fine_amt) as fine_amt FROM book_loans,fines WHERE book_loans.loan_id=fines.loan_id AND paid=FALSE GROUP BY book_loans.card_no;";
        ResultSet rs=st.executeQuery(query);
            while(rs.next())
            {
                int c1=rs.getInt("card_no");
                Double c4=rs.getDouble("fine_amt");
            model.addRow(new Object[]{c1,c4});
            }       
            if(model.getRowCount()==0)
            {
            JOptionPane.showMessageDialog(null,"No Records Found with the given Input");
            }
        
        con.close();
        }catch(Exception e){
        JOptionPane.showMessageDialog(this,"Error in connectivity");
        
        }
        
        
        
        
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model=(DefaultTableModel)jTable5.getModel();
        while(model.getRowCount()>0)
        {
            for(int i=0;i<model.getRowCount();i++)
            {
            model.removeRow(i);
            }
        }
        jTextField17.setText("");
    }//GEN-LAST:event_jButton10ActionPerformed

    private void p1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_p1MouseClicked
        // TODO add your handling code here:
        
         try
        {
            int row=p1.getSelectedRow();
            String p1book_id=(p1.getModel().getValueAt(row,0).toString());
            jTextField4.setText(p1book_id);
            String p1branch_id=(p1.getModel().getValueAt(row,3).toString());
            jTextField5.setText(p1branch_id);
            jTabbedPane1.setSelectedIndex(1);
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_p1MouseClicked

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model=(DefaultTableModel)jTable5.getModel();
         while(model.getRowCount()>0)
        {
            for(int i=0;i<model.getRowCount();i++)
            {
            model.removeRow(i);
            }
        }
         try
        {
        Class.forName("com.mysql.jdbc.Driver");
        System.out.println("Entered 1");
        Connection con=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/library_db", "root", "root");
        System.out.println("Entered 2");
        String card=jTextField17.getText();
        int cno=0;
        if(!card.equals(""))
        {
        cno=Integer.parseInt(card);
       Statement st=con.createStatement();
       String query="SELECT book_loans.card_no as card_no,SUM(fine_amt) as fine_amt FROM book_loans,fines WHERE book_loans.loan_id=fines.loan_id AND paid=FALSE AND card_no="+cno+" GROUP BY book_loans.card_no;";
        ResultSet rs=st.executeQuery(query);
            
        while(rs.next())
            {
                int c1=rs.getInt("card_no");
                Double c4=rs.getDouble("fine_amt");
            model.addRow(new Object[]{c1,c4});
            
            }       
            if(model.getRowCount()==0)
        {
            JOptionPane.showMessageDialog(null,"No Records Found with the given Input");
        }
        }
        else
            JOptionPane.showMessageDialog(this,"Enter any value for card_no");
        con.close();
        }catch(Exception e){
        JOptionPane.showMessageDialog(this,"Error in connectivity");
        
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTable p1;
    // End of variables declaration//GEN-END:variables
}
